<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- shiroFilter Bean的id 必须和web.xml中配置的filter的name一直  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <!--loginUrl 没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面。 -->
        <property name="loginUrl" value="/login.jsp" />
        <!--successUrl 登录成功默认跳转页面，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，则在登录自动跳转到那个需要登录的页面。不跳转到此。-->
        <property name="successUrl" value="/success.jsp" />
        <!--unauthorizedUrl：没有权限默认跳转的页面。-->
        <property name="unauthorizedUrl" value="/index.jsp" />
        <!-- 配置 重写的 父类方法 issueSuccessFilter  让自己重写的方法起到作用  以防止 登录成功后 不调到 successUrl 的问题 -->
        <property name="filters">
            <map>
                <entry key="authc" value-ref="loginFormAuthenticationFilter"/>
            </map>
        </property>
        <!-- 这个就是权限路径过滤  会在下面单独列出来 -->
        <property name="filterChainDefinitions">
            <value>
                /static/**=anon  <!--静态资源允许访问-->
                /login.jsp=anon
                /= anon
                /git/login=anon    <!--登录不需要认证-->
                /logout = logout
                /role/** = roles[admin]
                /permission/** = perms[permssion:look]
                /git/** = authc
            </value>
        </property>
    </bean>
    <!-- 配置securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 单realm应用。如果有多个realm，使用‘realms’属性代替 -->
        <property name="realm" ref="testRealm" />
        <property name="cacheManager" ref="cacheManager" />  <!-- 缓存配置，集群环境慎用 -->
    </bean>
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" />
    <!-- 一个简单的jdbcRealm -->
    <bean id="testRealm" class="com.github.Duankan.shiro.TestRealm">
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--&lt;!&ndash; dataSource数据源，可以引用spring中配置的数据源 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="authenticationQuery"  value="select t.password from users t where t.username = ?" />&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash; authenticationQuery登录认证用户的查询SQL，需要用登录用户名作为条件，查询密码字段。 &ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="userRolesQuery"  value="select a.rolename from my_user_role t left join my_role a on t.roleid = a.id where t.username = ? " />&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash; userRolesQuery用户角色查询SQL，需要通过登录用户名去查询。查询角色字段 &ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="permissionsQuery"  value="SELECT B.PERMISSION FROM MY_ROLE T LEFT JOIN MY_ROLE_PERMISSION A ON T.ID = A.ROLE_ID LEFT JOIN MY_PERMISSION B ON A.PERMISSION = B.ID WHERE T.ROLENAME = ? " />&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash; permissionsQuery用户的权限资源查询SQL，需要用单一角色查询角色下的权限资源，如果存在多个角色，则是遍历每个角色，分别查询出权限资源并添加到集合中。 &ndash;&gt;&ndash;&gt;-->
        <!--<property name="permissionsLookupEnabled" value="true" />-->
        <!--&lt;!&ndash; permissionsLookupEnabled默认false。False时不会使用permissionsQuery的SQL去查询权限资源。设置为true才会去执行。&ndash;&gt;-->
        <!--<property name="saltStyle" value="NO_SALT" />-->
        <!--&lt;!&ndash; saltStyle密码是否加盐，默认是NO_SALT不加盐。加盐有三种选择CRYPT,COLUMN,EXTERNAL。这里按照不加盐处理。 &ndash;&gt;-->
        <!--<property name="credentialsMatcher" ref="hashedCredentialsMatcher" />-->
        <!--&lt;!&ndash; credentialsMatcher密码匹配规则 &ndash;&gt;-->
    </bean>
    <bean id="hashedCredentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5" />
        <!-- hashAlgorithmName必须的，没有默认值。可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高。这里使用MD5 -->
        <property name="storedCredentialsHexEncoded" value="true" />
        <!-- storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码 -->
        <property name="hashIterations" value="1" />
        <!-- hashIterations迭代次数，默认值是1。 -->
    </bean>
    <!-- 配置successURL自定义拦截器  -->
    <bean id="loginFormAuthenticationFilter" class="com.github.Duankan.filter.loginFormAuthenticationFilter"/>

</beans>